corr
}
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] > threshold) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] > 150) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
corr
summary(signif(corr,4))
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] > 150) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
corr
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] > 150) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
} else {next}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
corr
complete[,"nobs"] > 150
sum(complete[,"nobs"] > 150)
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] > 150) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
} else {next}
## Return a numeric vector of correlations
corr <- c(corr, signif(corr_i, 4))
}
corr
summary(corr)
summary(round(corr,4))
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] > 400) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
} else {next}
## Return a numeric vector of correlations
corr <- c(corr, signif(corr_i, 4))
}
corr
head(corr)
corr <- c()
for(i in 1:332) {
if (complete[i,"nobs"] >= 150) {
corr_i <- cor(dat[which(dat[,"ID"] == i), "sulfate"],
dat[which(dat[,"ID"] == i), "nitrate"],
use = "pairwise.complete.obs")
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
corr
summary(corr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 400)
cr <- corr("specdata", 5000)
seq_along(dat)
length(dat)
source("pollutant.R")
source("pollutantmean.R")
length(files)
seq_along(files)
seq_len(files)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files <- list.files(directory, full.names = TRUE)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
corr <- c()
for(i in seq_along(files)) {
if (complete(directory)[i,"nobs"] > threshold) {
corr_i <- cor(files[i][,"sulfate"],
files[i][,"nitrate"],
use = "pairwise.complete.obs")
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
signif(corr,4)
}
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr
files <- list.files("specdata", full.names = TRUE)
files
files[1]
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
complete
complete("specdata")
source("corr.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr
complete("specdata.R")
complete <- function(directory, id = 1:332) {
##binding all csv files
files <- list.files(directory, full.names = TRUE)
##vectors of id & nobs
dat_id <- c()
dat_nobs <- c()
for(i in id) {
file <- files[i]
dat_id <- c(dat_id, i)
dat_nobs <- c(dat_nobs, sum(complete.cases(file[i])))
}
##cbinding id and pollutant counts
id_nobs <- cbind(dat_id, dat_nobs)
complete <- as.data.frame(id_nobs)
colnames(complete) <- c("id", "nobs")
complete
}
complete("specdata.R")
complete <- function(directory, id = 1:332) {
##binding all csv files
files <- list.files(directory, full.names = TRUE)
##vectors of id & nobs
dat_id <- c()
dat_nobs <- c()
for(i in id) {
file <- read.csv(files[i])
dat_id <- c(dat_id, i)
dat_nobs <- c(dat_nobs, sum(complete.cases(file[i])))
}
##cbinding id and pollutant counts
id_nobs <- cbind(dat_id, dat_nobs)
complete <- as.data.frame(id_nobs)
colnames(complete) <- c("id", "nobs")
complete
}
complete("specdata.R")
complete("specdata.R")
complete <- function(directory, id = 1:332) {
##binding all csv files
files <- list.files(directory, full.names = TRUE)
##vectors of id & nobs
dat_id <- c()
dat_nobs <- c()
for(i in id) {
file <- read.csv(files[i])
dat_id <- c(dat_id, i)
dat_nobs <- c(dat_nobs, sum(complete.cases(file)))
}
##cbinding id and pollutant counts
id_nobs <- cbind(dat_id, dat_nobs)
complete <- as.data.frame(id_nobs)
colnames(complete) <- c("id", "nobs")
complete
}
complete("specdata.R")
files[1]
read.csv(files[1])
file <- read.csv(files[1])
file
sum(complete.cases(file))
complete <- function(directory, id = 1:332) {
##binding all csv files
files <- list.files(directory, full.names = TRUE)
##vectors of id & nobs
dat_id <- c()
dat_nobs <- c()
for(i in id) {
file <- read.csv(files[i])
dat_id <- c(dat_id, i)
dat_nobs <- c(dat_nobs, sum(complete.cases(file)))
}
##cbinding id and pollutant counts
id_nobs <- cbind(dat_id, dat_nobs)
complete <- as.data.frame(id_nobs)
colnames(complete) <- c("id", "nobs")
complete
}
complete("specdata.R")
complete("specdata")
corr <- c()
dat_complete <- complete("specdata")
for(i in seq_along(files)) {
if (dat_complete[i,"nobs"] > threshold) {
dat_subset <- read.csv(files[i])
corr_i <- cor(dat_subset$sulfate,
dat_subset$nitrate,
use = "pairwise.complete.obs")
##correlation of files in which nobs > threshold
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
corr
}
corr <- c()
dat_complete <- complete("specdata")
for(i in seq_along(files)) {
if (dat_complete[i,"nobs"] > 150) {
dat_subset <- read.csv(files[i])
corr_i <- cor(dat_subset$sulfate,
dat_subset$nitrate,
use = "pairwise.complete.obs")
##correlation of files in which nobs > threshold
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i) }
corr
head(signif(corr))
head(signif(corr,4))
summary(signif(corr,4))
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files <- list.files(directory, full.names = TRUE)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
corr <- c()
dat_complete <- complete(directory)
for(i in seq_along(files)) {
if (dat_complete[i,"nobs"] > threshold) {
dat_subset <- read.csv(files[i])
corr_i <- cor(dat_subset$sulfate,
dat_subset$nitrate,
use = "pairwise.complete.obs")
##correlation of files in which nobs > threshold
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
signif(corr,4)
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
files <- list.files(directory, full.names = TRUE)
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
corr <- c()
dat_complete <- complete(directory)
for(i in seq_along(files)) {
if (dat_complete[i,"nobs"] >= threshold) {
dat_subset <- read.csv(files[i])
corr_i <- cor(dat_subset$sulfate,
dat_subset$nitrate,
use = "pairwise.complete.obs")
##correlation of files in which nobs > threshold
} else {
next
}
## Return a numeric vector of correlations
corr <- c(corr, corr_i)
}
signif(corr,4)
}
corr("specdata", 150)
summary(corr)
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("corr.R")
> source("complete.R")
> cr <- corr("specdata", 150)
> head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
sumbmit()
submit()
submit()
corr("specdata")
cr <- corr("specdata")
length(cr)
summary(cr)
submit()
crazy <- function() {
x <- 3.14
print(x)
{print(x); x <<- 42; print(x)
print(x)}
}
x
crazy <- function() {
x <- 3.14
print(x)
{print(x); x <<- 42; print(x)}
print(x)
}
x
crazy()
crazy <- function() {
x <- 3.14
print(x)
{print(x); x <<- 42; print(x)}
print(x)
}
crazy <- function() {
x <- 3.14
print(x)
{print(x); x <- 42; print(x)}
print(x)
}
crazy()
x
crazy <- function() {
x <<- 3.14
print(x)
{print(x); x <- 42; print(x)}
print(x)
}
crazy()
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
> bigVec <- makeVector(1:1000)        # now we have an object 'bigVec' of type list
> biggerVec <- makeVector(1:100000)   # 'biggerVec' of type list with 100,000 numbers
> cachemean(bigVec)   # first time so this function will compute 'mean', store it and return it
bigVec <- makeVector(1:1000)
biggerVec <- makeVector(1:100000)
cachemean(bigVec)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL ##
set <- function(y) {
x <<- y
inverse <- NULL
}
get <- function() x
setinverse <- function(InverseMatrix) inverse <<- InverseMatrix
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("get the inverse of the matrix")
return(inverse)
}
matrix <- x$get()
inverse <- solve(matrix)
x$setinverse(inverse)
inverse
}
x <- matrix(1:4,2,2)
cacheSolve(x)
cacheSolve(x)
makeCacheMatrix(x)
x <- matrix(1:4,2,2)
makeCacheMatrix$get(x)
makeCacheMatrix$get()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
bigVec <- makeVector(1:1000)
bigVec$set()
cachemean(bigVec)
cachemean(bigVec)
bigVec$set(50:60)
cachemean(bigVec)
cachemean(bigVec)
bigVec$get()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inverse <- NULL ##
set <- function(y) {
x <<- y
inverse <<- NULL
}
get <- function() x
setinverse <- function(InverseMatrix) inverse <<- InverseMatrix
getinverse <- function() inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverse <- x$getinverse()
if(!is.null(inverse)) {
message("getting the inverse of the matrix")
return(inverse)
}
matrix <- x$get()
inverse <- solve(matrix)
x$setinverse(inverse)
inverse
}
test <- matrix(1:4,2,2)
cacheSolve(test)
test <- 1:4
cacheSolve(test)
mat <- matrix(1:4, 2,2)
matObj <- makeCacheMatrix(mat)
cacheSolve(matObj)
source('cachematrix.R')
setwd("~/Desktop/Online Courses/Biostatistics/datasciencecoursera/ProgrammingAssignment2")
source('cachematrix.R')
A <- matrix(1:4,2,2)
Am <- makeCacheMatrix(A)
Ai <- cacheSolve(Am)
Ai
solve(A)
